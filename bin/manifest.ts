import { writeFile, readFile } from 'fs/promises';

type PackageMeta = {
	author?: string;
	description?: string;
	version?: string;
};

type FxManifestPrimitive = string | number | boolean;
type FxManifestNestedObject = Record<string, FxManifestPrimitive>;
type FxManifestSubsection = Record<string, FxManifestPrimitive | FxManifestNestedObject>;

export interface FxManifestJson {
	[key: string]: FxManifestPrimitive | FxManifestPrimitive[] | FxManifestSubsection;
}

function isPlainObject(value: unknown): value is Record<string, unknown> {
	return typeof value === 'object' && value !== null && !Array.isArray(value);
}

async function readJSON<T = unknown>(filePath: string): Promise<T> {
	const fileContent = await readFile(filePath, 'utf8');
	return JSON.parse(fileContent) as T;
}

export async function generateFxManifest(): Promise<void> {
	const packageJson = await readJSON<PackageMeta>('./package.json');
	const fxmanifestJson = await readJSON<FxManifestJson>('./fxmanifest.json');

	let fxManifest =
		'-- @@@ This file is automatically generated during build @@@\n' +
		'-- @@@ Make changes in the fxmanifest.json / package.json files @@@\n\n' +
		`author '${packageJson.author ?? ''}'\n` +
		`description '${packageJson.description ?? ''}'\n` +
		`version '${packageJson.version ?? ''}'\n\n`;

	Object.keys(fxmanifestJson).forEach((key) => {
		const value = fxmanifestJson[key];
		if (Array.isArray(value)) {
			fxManifest += `${key} {\n`;
			value.forEach((item, index) => {
				fxManifest += `\t'${String(item)}'${index === value.length - 1 ? '\n' : ',\n'}`;
			});
			fxManifest += '}\n';
		} else if (isPlainObject(value)) {
			Object.entries(value).forEach(([subKey, subValue]) => {
				fxManifest += `${key} '${subKey}' {\n`;
				if (isPlainObject(subValue)) {
					Object.entries(subValue).forEach(([innerKey, innerValue]) => {
						fxManifest += `\t${innerKey} = '${String(innerValue)}'\n`;
					});
				} else {
					fxManifest += `\t${subKey} = '${String(subValue)}'\n`;
				}
				fxManifest += '}\n';
			});
		} else {
			fxManifest += `${key} '${String(value)}'\n`;
		}
	});

	await writeFile('fxmanifest.lua', fxManifest);

	await writeFile(
		'.yarn.installed',
		new Date().toLocaleString('en-US', {
			timeZone: 'UTC',
			timeStyle: 'long',
			dateStyle: 'full',
		})
	);
}

await generateFxManifest();
